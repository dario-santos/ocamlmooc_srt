1
00:00:00,000 --> 00:00:05,859
Neste vídeo, vamos aprender como usar
as excepções na linguagem de programação

2
00:00:05,859 --> 00:00:06,359
OCaml.

3
00:00:06,359 --> 00:00:08,889
Bem, o que são excepções?

4
00:00:08,889 --> 00:00:12,000
O OCaml permite o uso de excepções
que são bastante úteis para

5
00:00:12,000 --> 00:00:13,969
assinalar e tratar de condições excepcionais.

6
00:00:13,969 --> 00:00:16,270
O mesmo acontece em muitas outras linguagens de programação,

7
00:00:16,270 --> 00:00:23,680
mas em OCaml, excepções são construtores
de um tipo especial de soma extensível <u>exn</u>

8
00:00:23,680 --> 00:00:26,320
porém, é normalmente chamado de excepção.

9
00:00:26,320 --> 00:00:29,599
Este construtor pode ter argumentos
como qualquer outro construtor.

10
00:00:29,599 --> 00:00:32,689
Parece então um construtor normal
do tipo soma,

11
00:00:32,689 --> 00:00:34,960
como os que já descobrimos
até agora.

12
00:00:34,960 --> 00:00:38,890
Contudo, existem algumas diferenças
em relação aos construtores normais

13
00:00:38,890 --> 00:00:39,950
com tipos de soma.

14
00:00:39,950 --> 00:00:45,250
A primeira diferença é que
podemos definir novas excepções a qualquer altura.

15
00:00:45,250 --> 00:00:48,200
Isto não acontece para os tradicionais tipos soma.

16
00:00:48,200 --> 00:00:52,559
Por isso, este tipo de soma para excepções é especial,

17
00:00:52,559 --> 00:00:57,379
uma vez que pode ser extendido dinamicamente,
sempre que for necessário.

18
00:00:57,379 --> 00:01:01,309
Por outro lado, existem também limitações
que vêm com esta capacidade dinâmica.

19
00:01:01,309 --> 00:01:04,619
As excepções não podem ser polimórficas.

20
00:01:04,619 --> 00:01:06,760
O tipo tem que ser definido ao princípio.

21
00:01:06,760 --> 00:01:11,119
É extremamente simples declarar uma excepção

22
00:01:11,119 --> 00:01:11,790
no sistema.

23
00:01:11,790 --> 00:01:14,600
Basta para isso usarmos a palavra-chave <u>exception</u>,
como é mostrado aqui:

24
00:01:14,600 --> 00:01:18,710
no "toplevel" escrevemos
<u>exception E</u>,

25
00:01:18,710 --> 00:01:22,509
e depois de executado, o sistema irá
responder com:

26
00:01:22,509 --> 00:01:26,820
Ok, existe uma nova excepção declarada
com o construtor <u>E</u>.

27
00:01:26,820 --> 00:01:29,310
E estes são apenas construtores.

28
00:01:29,310 --> 00:01:32,009
Depois da definição da excepção, podemos simplesmente
usar, como podem ver

29
00:01:32,009 --> 00:01:32,250
aqui,

30
00:01:32,250 --> 00:01:37,360
podem simplesmente escrever <u>E</u>
e neste caso, o sistema responde com: sim,

31
00:01:37,360 --> 00:01:40,670
é um valor <u>E</u>
do tipo <u>exception</u>.

32
00:01:40,670 --> 00:01:43,670
do tipo de excepção.

33
00:01:43,670 --> 00:01:46,420
Assim que definimos a excepção,

34
00:01:46,420 --> 00:01:48,310
a primeira coisa que podemos fazer
com esta excepção é

35
00:01:48,310 --> 00:01:49,090
lançá-la.

36
00:01:49,090 --> 00:01:51,060
O que quero dizer com isto é que podemos dizer ao sistema para:

37
00:01:51,060 --> 00:01:52,689
"encontrei uma excepção, a excepção <u>E</u>,

38
00:01:52,689 --> 00:01:55,740
por favor, pára o que estejas a fazer
e diz a toda a gente o que aconteceu.""

39
00:01:55,740 --> 00:02:00,860
Para sinalizar esta excepção,
usamos a palavra-chave <u>raise</u>,

40
00:02:00,860 --> 00:02:03,200
como vemos aqui: <u>raise E</u>.

41
00:02:03,200 --> 00:02:06,590
E o sistema responde agora
<u>exception: E</u>,

42
00:02:06,590 --> 00:02:09,470
o que significa que o programa foi interrompido
porque foi lançada uma excepção

43
00:02:09,470 --> 00:02:11,530
e que a excepção é <u>E</u>.

44
00:02:11,530 --> 00:02:13,160
Para ser mais fácil de entender:

45
00:02:13,160 --> 00:02:18,080
quando uma excepção é lançada
tudo o que estava a ser feito é imediatamente interrompido

46
00:02:18,080 --> 00:02:21,110
e apenas recebemos o valor gerado pela excepção
como resultado.

47
00:02:21,110 --> 00:02:27,920
Por exemplo, temos aqui uma definição onde
lançamos a excepção E na expressão

48
00:02:27,920 --> 00:02:30,590
que deve devolver como resultado a lista <u>[1; 2]</u>,

49
00:02:30,590 --> 00:02:34,860
e se executarmos esta expressão,
o sistema não irá computar

50
00:02:34,860 --> 00:02:36,760
a lista <u>[1; 2]</u>, não devolve 1 nem 2,

51
00:02:36,760 --> 00:02:41,280
mas apenas termina assim que vê
a excepção <u>E</u>

52
00:02:41,280 --> 00:02:46,950
Vamos agora ver excepções aplicadas
a um exemplo mais realista.

53
00:02:46,950 --> 00:02:51,319
Vamos imaginar que queremos definir uma
função que recebe uma lista,

54
00:02:51,319 --> 00:02:54,190
e obtém o primeiro elemento
que está na lista.

55
00:02:54,190 --> 00:02:56,580
Uma definição natural poderá
ser semelhante a isto:

56
00:02:56,580 --> 00:02:59,709
A função <u>head</u>, que
recebe uma lista.

57
00:02:59,709 --> 00:03:03,930
É definida com correspondência
de padrão: a lista é uma lista de elementos?

58
00:03:03,930 --> 00:03:06,150
Se sim, então devolvemos o primeiro elemento.

59
00:03:06,150 --> 00:03:08,700
Mas o que podemos fazer se a lista estiver vazia?

60
00:03:08,700 --> 00:03:10,280
Não há nada para devolver.

61
00:03:10,280 --> 00:03:13,920
Bem, este é um cenário típico onde as
excepções podem ser usadas.

62
00:03:13,920 --> 00:03:17,900
Primeiro que tudo, vamos definir uma
excepção com o nome <u>Empty_List</u>.

63
00:03:17,900 --> 00:03:24,890
Convém escolher um nome que faça sentido.

64
00:03:24,890 --> 00:03:27,010
E se encontrarmos uma lista vazia,

65
00:03:27,010 --> 00:03:30,780
simplesmente lançamos a excepção a dizer que
foi encontrada uma condição excecional.

66
00:03:30,780 --> 00:03:39,019
Bem, vamos ver.

67
00:03:39,019 --> 00:03:42,610
Podemos então passar a definição para o "toplevel."

68
00:03:42,610 --> 00:03:46,060
Temos agora definida a excepção <u>Empty_List</u>.

69
00:03:46,060 --> 00:03:49,340
Definimos também a função <u>head</u>.

70
00:03:49,340 --> 00:03:53,909
Ok, podemos ver que, agora, a função já é
aceite pelo compilador.

71
00:03:53,909 --> 00:03:54,349
Que diz:

72
00:03:54,349 --> 00:03:57,370
A função <u>head</u> que recebe <u>'a list</u> e devolve <u>'a</u>.

73
00:03:57,370 --> 00:04:00,040
Mas na verdade
existe um caso particular em que a excepção irá ser lançada.

74
00:04:00,040 --> 00:04:02,560
Vamos testar um pouco.

75
00:04:02,560 --> 00:04:15,239
Podemos testar, por exemplo, obter o primeiro elemento
da lista <u>[1; 2; 3]</u>.

76
00:04:15,239 --> 00:04:18,290
E como era de esperar, obtemos o valor 1, o que é óptimo.

77
00:04:18,290 --> 00:04:30,180
Se chamarmos a função <u>head</u> com uma lista
vazia, como devem estar à espera, recebemos

78
00:04:30,180 --> 00:04:30,830
uma excepção.

79
00:04:30,830 --> 00:04:32,460
Isto é uma excepção que diz:

80
00:04:32,460 --> 00:04:35,050
"Não foi possível encontrar um resultado
satisfatório para devolver

81
00:04:35,050 --> 00:04:39,009
e foi encontrada uma situação excepcional,
e o que recebemos é uma excepção."

82
00:04:39,009 --> 00:04:43,669
É bastante interessante lançar excepções,

83
00:04:43,669 --> 00:04:49,370
mas também é fundamental saber capturar essas
excepções e fazer alguma coisa com elas

84
00:04:49,370 --> 00:04:51,930
para podermos tratar de situações excepcionais.

85
00:04:51,930 --> 00:04:55,360
Em OCaml a captura de excepções é feita
com a construção try/with.

86
00:04:55,360 --> 00:04:57,750
Temos aqui um exemplo da sintaxe,

87
00:04:57,750 --> 00:05:02,259
podemos simplesmente escrever <u>try</u>, seguido
de qualquer expressão que quisermos

88
00:05:02,259 --> 00:05:04,560
seguido de <u>with</u>. Temos depois que fazer
correspondência de padrões.

89
00:05:04,560 --> 00:05:05,410
O que acontece?

90
00:05:05,410 --> 00:05:09,030
Basicamente, a expressão <u>e</u> é avaliada.

91
00:05:09,030 --> 00:05:16,759
Se não lançar nenhum excepção: fantástico,
o resultado da construção try/with é apenas

92
00:05:16,759 --> 00:05:18,090
o resultado de <u>e</u>.

93
00:05:18,090 --> 00:05:23,280
mas se uma excepção, por exemplo <u>E</u>,
for lançada

94
00:05:23,280 --> 00:05:29,050
então a excepção lançada é comparada
com todos os padrões que vêm depois

95
00:05:29,050 --> 00:05:30,850
da cláusula 'with'.

96
00:05:30,850 --> 00:05:36,570
E aqui acontece uma correspondência de padrões normal
e podemos qualquer padrão válido.

97
00:05:36,570 --> 00:05:40,850
Se a excepção corresponder a algum padrão
como por exemplo, ao padrão <u>i</u>,

98
00:05:40,850 --> 00:05:48,240
então o resultado de todo a construção
vai ser o resultado de avaliar a expressão

99
00:05:48,240 --> 00:05:50,750
<u>e_i</u>.

100
00:05:50,750 --> 00:05:58,370
É necessário ter cuidado porque todas as <u>e_i</u>
têm que ter o mesmo tipo e também o mesmo

101
00:05:58,370 --> 00:05:59,470
tipo que a <u>e</u>,

102
00:05:59,470 --> 00:06:03,550
porque estes são todos os valores que
podemos devolver em situações excepcionais

103
00:06:03,550 --> 00:06:06,190
em vez do resultado de <u>e</u>.

104
00:06:06,190 --> 00:06:11,630
Vamos ver agora uma questão interessante.

105
00:06:11,630 --> 00:06:15,350
Vamos usar agora uma lista, uma lista grande de valores inteiros.

106
00:06:15,350 --> 00:06:20,699
Queremos multiplicar todos os elementos desta lista
de maneira eficiente.

107
00:06:20,699 --> 00:06:22,750
Já vimos soluções para este problema.

108
00:06:22,750 --> 00:06:26,389
Mas vamos agora abordar um caso particular que
é interessante:

109
00:06:26,389 --> 00:06:29,960
O que acontece se um elemento da lista for
o número 0?

110
00:06:29,960 --> 00:06:32,460
Assim que encontrarmos o número 0,

111
00:06:32,460 --> 00:06:36,120
sabemos que não vale a pena continuar
o resto da computação na lista

112
00:06:36,120 --> 00:06:38,389
uma vez que o resultado irá ser sempre 0.

113
00:06:38,389 --> 00:06:43,710
Uma implementação simples para resolver este problema é
uma definição

114
00:06:43,710 --> 00:06:44,590
como esta.

115
00:06:44,590 --> 00:06:48,819
Como podem ver, estamos a definir a nossa
função recursiva <u>multl</u> para a multiplicação

116
00:06:48,819 --> 00:06:51,770
de uma lista que devolve 1 se a lista estiver vazia,

117
00:06:51,770 --> 00:06:56,160
e quando a lista não está vazia, é verificado se o
resultado é 0,

118
00:06:56,160 --> 00:07:00,400
ao princípio.
Este caso simplesmente termina a computação e devolve 0.

119
00:07:00,710 --> 00:07:04,530
Caso contrário, ele chama-se a si mesmo recursivamente no resto da lista e faz a multiplicação
por <u>a</u>.

120
00:07:04,840 --> 00:07:09,180
Isto é uma definição que funciona perfeitamente
bem.

121
00:07:09,180 --> 00:07:14,729
Podemos experimentá-la com um exemplo.

122
00:07:14,729 --> 00:07:18,310
Vamos usá-la neste exemplo.

123
00:07:18,310 --> 00:07:21,759
Ok, obviamente o resultado é 0:

124
00:07:21,759 --> 00:07:23,770
vêm, podemos ver o valor 0 no meio.

125
00:07:23,770 --> 00:07:27,520
Mas isto não é assim tão eficiente
quanto isso,

126
00:07:27,520 --> 00:07:30,710
porque assim que um 0 é
encontrado na lista,

127
00:07:30,710 --> 00:07:34,949
por exemplo,
nesta posição aqui, o que acontece

128
00:07:34,949 --> 00:07:38,259
é que quando o resultado esperado é 0

129
00:07:38,259 --> 00:07:42,449
todas as chamadas recursivas têm que ser
executadas,

130
00:07:42,449 --> 00:07:47,580
e vai acabar por fazer muitas multiplicações do valor
0 que recebemos

131
00:07:47,580 --> 00:07:51,160
aqui como resultado, para os elementos que estão
anexados ali.

132
00:07:51,160 --> 00:07:56,930
Desta forma, pode demorar bastante tempo.
Imaginem que têm uma lista com milhões de valores inteiros

133
00:07:56,930 --> 00:07:58,220
e que encontramos um 0 no final,

134
00:07:58,220 --> 00:08:02,129
vamos precisar de fazer
milhões de multiplicações por 0 quando voltamos
atrás

135
00:08:02,129 --> 00:08:02,900
na recursividade.

136
00:08:02,900 --> 00:08:04,830
Será que é possível ser mais rápido do que isto?

137
00:08:04,830 --> 00:08:05,400
Sim.

138
00:08:05,400 --> 00:08:11,210
Isto é uma situação típica onde
usar excepções pode ajudar-nos a poupar

139
00:08:11,210 --> 00:08:13,229
muito tempo computacional.

140
00:08:13,229 --> 00:08:18,590
Vamos então refazer o exemplo anterior
mas agora usando excepções para terminar

141
00:08:18,590 --> 00:08:22,270
a computação, sem que tenhamos que voltar
atrás nas chamadas recursivas

142
00:08:22,270 --> 00:08:23,860
em vez de apenas devolver 0.

143
00:08:23,860 --> 00:08:25,580
Como conseguimos isto?

144
00:08:25,580 --> 00:08:29,620
Vamos primeiro definir a excepção <u>Zero</u>,
o nome da excepção convém ser algo que faça sentido!

145
00:08:29,620 --> 00:08:33,019
E definimos também de maneira diferente a multiplicação de
listas com

146
00:08:33,019 --> 00:08:36,589
uma excepção nesta função.

147
00:08:36,589 --> 00:08:43,390
O objectivo é fazer exactamente o mesmo
que anteriormente, mas, lançar a

148
00:08:43,390 --> 00:08:46,610
excepção <u>Zero</u> assim que o inteiro 0 é encontrado,

149
00:08:46,610 --> 00:08:49,600
quando a excepção <u>Zero</u> é capturada, então devolvemos o valor
0

150
00:08:49,600 --> 00:08:51,560
como um resultado inteiro.

151
00:08:51,560 --> 00:08:55,510
A definição interna desta função auxiliar

152
00:08:55,510 --> 00:08:57,040
é semelhante à anterior

153
00:08:57,040 --> 00:09:01,459
mudando apenas o seu comportamento para
quando é encontrado um 0

154
00:09:01,459 --> 00:09:04,899
lançar uma excepção
que neste caso é a excepção <u>Zero</u>.

155
00:09:04,899 --> 00:09:09,019
Isto irá fazer com que todas as chamadas
recursivas presentes na pilha

156
00:09:09,019 --> 00:09:10,839
serão descartadas,

157
00:09:10,839 --> 00:09:14,640
e apenas será lançada a excepção <u>Zero</u>.

158
00:09:14,640 --> 00:09:19,459
Podemos agora usar o interpretador para
ver o que acontece.

159
00:09:19,459 --> 00:09:23,649
Podemos ver que a função é novamente aceite.

160
00:09:23,649 --> 00:09:37,820
E podemos testar novamente com
um exemplo semelhante.

161
00:09:37,820 --> 00:09:40,610
O resultado é novamente zero, mas acreditem em mim,

162
00:09:40,610 --> 00:09:48,000
que desta vez foi muito mais rápido a dar o resultado
uma vez que estamos a deitar fora toda a pilha de chamadas.

163
00:09:48,000 --> 00:09:54,720
Vimos como criar novas excepções, como lançá-las
e como as tratar.

164
00:09:54,720 --> 00:09:57,959
Mas é muito interessante saber que

165
00:09:57,959 --> 00:09:58,959
no sistema OCaml,

166
00:09:58,959 --> 00:10:04,649
existem muitos erros que ocorrem em tempo
de execução que são capturados como excepções e devolvidos

167
00:10:04,649 --> 00:10:06,220
para os podermos tratar.

168
00:10:06,220 --> 00:10:10,940
Bem, se bem se lembram, no OCaml, os erros de tipo são
capturados

169
00:10:10,940 --> 00:10:11,829
em tempo de compilação,

170
00:10:11,829 --> 00:10:16,100
mas existem muitos outros erros que não são erros
de tipo e que não podem

171
00:10:16,100 --> 00:10:17,870
ser capturados em tempo de compilação.

172
00:10:17,870 --> 00:10:19,010
Estes são chamados de erros em tempo de execução.

173
00:10:19,010 --> 00:10:26,510
Como por exemplo: divisão por zero, correspondência de padrão
incompleta, sair dos limites de uma estrutura mutável

174
00:10:26,510 --> 00:10:29,480
entre outros.

175
00:10:29,480 --> 00:10:35,860
O que é interessante é que no OCaml, quando um erro deste
tipo acontece, o programa não termina abruptamente.

176
00:10:35,860 --> 00:10:40,920
O que acontece é que o sistema captura este erro
e transforma-o numa excepção que é depois lançada,

177
00:10:40,920 --> 00:10:43,209
e esta excepção é algo que o programador pode
capturar

178
00:10:43,209 --> 00:10:45,430
e tratar.

179
00:10:45,430 --> 00:10:46,870
Vamos ver alguns exemplos.

180
00:10:46,870 --> 00:10:53,070
Ok, vamos ver o que acontece quando fazemos
uma divisão por zero.

181
00:10:53,070 --> 00:10:57,110
Por exemplo, vamos tentar dividir 3 por 0.

182
00:10:57,110 --> 00:11:01,640
Bem, ocorreu um erro e o sistema diz que
uma excepção

183
00:11:01,640 --> 00:11:05,839
foi lançada que tem o nome de <u>Division_by_zero</u>.

184
00:11:05,839 --> 00:11:11,050
Isto é na verdade o nome do construtor da excepção
<u>Division_by_zero</u>.

185
00:11:11,050 --> 00:11:17,630
Outros exemplos: vamos ver como é que podemos
sair dos limites de uma estrutura de dados mutável,

186
00:11:17,630 --> 00:11:18,959
como por exemplo, um vector.

187
00:11:18,959 --> 00:11:24,230
Aqui definimos um vector com 3 elementos.

188
00:11:24,230 --> 00:11:29,260
Como podemos ver: o primeiro elemento é o 1,
o segundo é 2 e o terceiro é 3.

189
00:11:29,260 --> 00:11:34,459
Mas como se devem lembrar,
os vectores em OCaml começam no 0

190
00:11:34,459 --> 00:11:41,579
como também acontece noutras linguagens.
Para acedermos à primeira posição, é na verdade <u>v.(0)</u>.

191
00:11:41,579 --> 00:11:44,730
Agora imaginemos que a uma dada altura do vosso programa
se esquecem que

192
00:11:44,730 --> 00:11:45,420
os vectores começam no 0

193
00:11:45,420 --> 00:11:49,640
e tentam aceder ao terceiro elemento, escrevendo <u>v.(3)</u> em vez de

194
00:11:49,640 --> 00:11:50,680
<u>v.(2)</u>.

195
00:11:50,680 --> 00:11:58,310
Neste caso, recebemos outra excepção
que é um erro de acesso fora dos limites

196
00:11:58,310 --> 00:11:59,300
de um vector.

197
00:11:59,300 --> 00:12:03,000
Mas neste caso, e como podem ver,
em vez de o programa terminar abruptamente,

198
00:12:03,000 --> 00:12:05,680
como acontece em algumas linguagens de programação,

199
00:12:05,680 --> 00:12:10,279
apenas recebemos o erro que aconteceu durante a execução
em forma de excepção

200
00:12:10,279 --> 00:12:12,649
que é possivel de ser capturada e tratada.

201
00:12:12,649 --> 00:12:14,850
A excepção recebida é <u>Invalid_argument "index out of bounds"</u>,

202
00:12:14,850 --> 00:12:17,459
o que nos diz que durante a execução,

203
00:12:17,459 --> 00:12:20,389
existe uma verificação de limites que é feita


204
00:12:20,389 --> 00:12:21,740
pelo sistema.

205
00:12:21,740 --> 00:12:28,760
O terceiro exemplo que queremos mostrar
o que acontece

206
00:12:28,760 --> 00:12:30,320
quando ignoramos as recomendações do compilador,

207
00:12:30,320 --> 00:12:32,260
como por exemplo, esta definição desta função

208
00:12:32,260 --> 00:12:33,050
aqui.

209
00:12:33,050 --> 00:12:38,000
Como deve ser óbvio, a esta altura do curso,
a correspondência de padrão não está completa,

210
00:12:38,000 --> 00:12:42,450
pois falta o caso de quando a lista é vazia.

211
00:12:42,450 --> 00:12:46,850
Esta função apenas recebe uma lista e
retira o primeiro elemento da lista

212
00:12:46,850 --> 00:12:49,550
e mantém os restantes elementos, mas o que acontece
se a lista que recemos estiver vazia?

213
00:12:49,550 --> 00:12:50,899
Não existe nada para retirar.

214
00:12:50,899 --> 00:12:53,380
E não especificámos o que deveria acontecer neste caso.

215
00:12:53,380 --> 00:12:57,820
Se enviarmos esta função para compilador,

216
00:12:57,820 --> 00:13:02,019
ele consegue perceber que a correspondência de padrões
não é completa e consegue dar um exemplo

217
00:13:02,019 --> 00:13:05,459
de um valor que não corresponde aos padrões definidos,
e que neste caso é exactamente a lista vazia.

218
00:13:05,459 --> 00:13:10,820
O programador pode optar por ignorar este aviso
uma vez que o compilador irá aceitar a função

219
00:13:10,820 --> 00:13:11,149
na mesma.

220
00:13:11,149 --> 00:13:18,910
Se nunca lhe for fornecida uma lista vazia,
a função pode ser usada sem qualquer problema

221
00:13:18,910 --> 00:13:19,990
e irá funcionar correctamente.

222
00:13:19,990 --> 00:13:25,750
Mas quando experimentamos a função no caso
para qual

223
00:13:25,750 --> 00:13:29,230
a definição não foi correctamente feita,

224
00:13:29,230 --> 00:13:32,740
obtemos um erro que é a excepção <u>Match_failure</u>

225
00:13:32,740 --> 00:13:37,570
E por isso em tempo de execução existe um caso que não pode ser resolvido
pela correspondência de padrões.

226
00:13:37,570 --> 00:13:41,820
E mais uma vez, o programa não termina abruptamente, mas apenas
lança uma excepção

227
00:13:41,820 --> 00:13:44,910
que podemos capturar e tratar mais tarde.

228
00:13:44,910 --> 00:13:50,420
Para terminar, vimos como funcionam as excepções.

229
00:13:50,420 --> 00:13:56,050
As excepções são construtores do tipo de soma que é extensível.

230
00:13:56,050 --> 00:13:59,540
Podem ser declaradas e lançádas
de maneira bastante simples

231
00:13:59,540 --> 00:14:01,600
com as palavras-chave <u>exception</u> e <u>raise</u>.

232
00:14:01,600 --> 00:14:05,560
Podem ser capturas e tratadas usando
a construção

233
00:14:05,560 --> 00:14:06,550
<u>try ... with ...</u>

234
00:14:06,550 --> 00:14:10,300
E são bastante úteis a sinalizar e
tratar condições excepcionais como também para

235
00:14:10,300 --> 00:14:11,170
controlar o controlo de fluxo,

236
00:14:11,170 --> 00:14:16,959
de forma a podermos escrever algoritmos mais eficientes.
É bom também saber que, ao contrário do que acontece

237
00:14:16,959 --> 00:14:19,329
em outras linguagens de programação,

238
00:14:19,329 --> 00:14:23,899
lançar e tratar excepções é extremamente rápido.

239
00:14:23,899 --> 00:14:29,800
Por isso, se puderem, usem as excepções nos vosso algoritmos.
