1
00:00:00,490 --> 00:00:01,420
Bem-vindos novamente!

2
00:00:01,420 --> 00:00:10,919
Este vídeo fala de como podemos
construir e usar tuplos.

3
00:00:10,919 --> 00:00:15,709
Alguns valores são naturalmente construídos a partir
de outros valores.

4
00:00:15,709 --> 00:00:20,949
Por exemplo, se quisermos representar um cidadão,

5
00:00:20,949 --> 00:00:27,779
este é composto por um nome, o primeiro nome e
o número de segurança social.

6
00:00:27,779 --> 00:00:31,869
Se quisermos representar um ponto em duas dimensões,

7
00:00:31,869 --> 00:00:35,570
então precisamos de um abcissa e de uma ordenada.

8
00:00:35,570 --> 00:00:41,170
Como podemos então construir e usar
este tipo de valores em OCaml?

9
00:00:43,260 --> 00:00:49,800
Vamos definir a origem do plano como um
ponto de duas dimensões em OCaml.

10
00:00:49,800 --> 00:00:57,540
Para representar um ponto de duas dimensões.
queremos um tuplo em que

11
00:00:57,540 --> 00:01:02,780
os dois componentes do tuplo sejam igual a zero.

12
00:01:02,780 --> 00:01:04,649
Podemos escrever isto da seguinte forma:

13
00:01:04,649 --> 00:01:08,560
Primeiro abrimos parêntesis, seguido de um zero;

14
00:01:08,560 --> 00:01:11,899
uma vírgula para separar os componentes do tuplo;

15
00:01:11,899 --> 00:01:15,280
logo de seguida, escrevemos o segundo componente do tuplo; e

16
00:01:15,280 --> 00:01:20,820
finalmente temos que fechar os parêntesis.

17
00:01:20,820 --> 00:01:26,530
Como podem ver, o "toplevel" conseguiu inferir
o tipo desta expressão como:

18
00:01:26,530 --> 00:01:29,270
um tuplo de tamanho dois.
--- Um par ---

19
00:01:29,270 --> 00:01:34,390
O primeiro componente tem tipo <u>int</u>,
e o segundo componente tem tipo <u>int</u>.

20
00:01:34,390 --> 00:01:40,979
E, obviamente, podemos fazer o mesmo para
outros valores inteiros.

22
00:01:41,829 --> 00:01:48,511
Podemos usar o mesmo exemplo para escrever

23
00:01:48,520 --> 00:01:55,299
um identificador de tipo para representar
o tipo de um ponto de duas dimensões.

24
00:01:55,299 --> 00:01:58,880
Vamos usar o que aprendemos
no vídeo anterior

25
00:01:58,880 --> 00:02:03,789
e adicionar um identificador <u>point2D</u>

26
00:02:03,789 --> 00:02:06,520
Este identificador <u>point2D</u> pode ser usado para

27
00:02:06,520 --> 00:02:16,580
restringir o tipo da origem de forma
a que lhe seja atríbuido o tipo <u>point2D</u>.

28
00:02:20,360 --> 00:02:22,280
Agora que vimos alguns exemplos,

29
00:02:22,290 --> 00:02:26,720
vamos rever as regras de sintaxe.

30
00:02:26,720 --> 00:02:28,640
A nível dos tipos,

31
00:02:28,650 --> 00:02:33,400
podemos usar o operador <u>*</u>

32
00:02:33,400 --> 00:02:37,320
para juntar dois tipos para formar um tuplo de tipos


33
00:02:37,320 --> 00:02:39,800
A nível das expressões,

34
00:02:39,810 --> 00:02:42,850
se quisermos construir um tuplo,

35
00:02:42,850 --> 00:02:45,850
temos que separar as expressões

36
00:02:45,850 --> 00:02:51,640
--- que constroem os vários componentes
deste tuplo ---

37
00:02:51,640 --> 00:02:54,030
por vírgulas.

38
00:02:54,030 --> 00:02:56,850
E é assim que se constroí um tuplo.

39
00:02:56,850 --> 00:02:58,810
Como podemos então ver o seu conteúdo?

40
00:02:58,810 --> 00:03:02,270
A avaliação de um tuplo,

41
00:03:02,270 --> 00:03:07,230
---ou qualquer estrutura de dados em OCaml---

42
00:03:07,230 --> 00:03:08,350
é feita através de <i>correspondência de padrões</i>

43
00:03:08,350 --> 00:03:15,750
Um padrão descreve como os valores são
vistos pelo programa.

44
00:03:15,750 --> 00:03:23,930
Padrões aparecem nas construções <u>let</u>
e nos argumentos das funções.

45
00:03:23,930 --> 00:03:30,230
Na verdade, já vimos a forma mais simples
de padrões:

46
00:03:30,230 --> 00:03:32,560
Os identificadores.

47
00:03:32,560 --> 00:03:39,480
Quando temos uma expressão como estas:
<u>let x = 6 * 3 in x</u>

48
00:03:39,480 --> 00:03:42,130
podemos lê-la

49
00:03:42,130 --> 00:03:53,120
"Ao valor da expressão <u>6 * 3</u>
é-lhe atribuido o nome <u>x</u>"

51
00:03:53,120 --> 00:03:56,900
Existe uma outra forma de padrão
que é bastante simples,

52
00:03:56,900 --> 00:04:01,560
usada para dizer quando queremos
ignorar alguns componentes"

53
00:04:01,560 --> 00:04:08,090
Este padrão tem o nome de "wildcard" e
pode ser usado através de um "underscore"

54
00:04:08,090 --> 00:04:10,850
Esta expressão pode ser lida como:

55
00:04:10,850 --> 00:04:17,280
"Vou ignorar o valor de <u>6 * 3</u>".


56
00:04:17,280 --> 00:04:23,219
Para observarmos os diferentes componentes
de um tuplo,

57
00:04:23,219 --> 00:04:31,749
temos que compor os padrões
para estes componentes separando-os por vírgulas.

58
00:04:31,749 --> 00:04:36,300
Por exemplo, a expressão seguinte pode ser lida como:

59
00:04:36,300 --> 00:04:45,990
"Eu vou ver o primeiro elemento do tuplo como sendo
<u>x</u>, e"

60
00:04:45,990 --> 00:04:50,819
"vou ignorar o segundo componente do tuplo."

62
00:04:52,449 --> 00:04:56,240
Vamos então definir um tuplo

63
00:04:56,240 --> 00:04:59,740
que é um par de dois inteiros.

64
00:04:59,740 --> 00:05:07,259
Se quiser atribuir um nome
ao primeiro componente deste par e quiser

66
00:05:07,259 --> 00:05:09,939
ignorar o segundo componente deste par,

67
00:05:09,939 --> 00:05:12,389
uso o padrão que

68
00:05:12,389 --> 00:05:20,749
começa com um padrão de identificador e
que seja seguido por um padrão "wildcard".

69
00:05:20,749 --> 00:05:27,680
E, como podemos ver, o "toplevel" apenas
atribuiu um nome ao primeiro componente <u>x</u>.

70
00:05:27,680 --> 00:05:31,779
---que é igual a <u>18</u>---

71
00:05:31,779 --> 00:05:40,340
Este padrão pode também ser usado
para um argumento de uma função.

72
00:05:40,340 --> 00:05:42,099
---Desta maneira---

73
00:05:42,099 --> 00:05:50,279
Esta é um função geral que
devolve sempre o primeiro componente de um par.

74
00:05:50,279 --> 00:05:56,449
A segunda função irá devolver o
segundo componente de qualquer par.

76
00:05:57,509 --> 00:06:03,539
Vamos então rever a sintaxe
para os padrões de tuplos.

77
00:06:03,539 --> 00:06:07,259
Temos apenas que escrever um padrão para cada componente,

78
00:06:07,259 --> 00:06:11,289
e separá-los com vírgulas.

79
00:06:11,289 --> 00:06:12,779
A única restrição é:

80
00:06:12,779 --> 00:06:15,749
o número de sub-padrões tem que ser igual ao

81
00:06:15,749 --> 00:06:22,540
número de componentes do tuplo que estamos
a usar para fazer correspondência de padrões.

82
00:06:22,540 --> 00:06:32,620
Temos que ter a certeza também que um identificador
é usado apenas uma vez num padrão.

83
00:06:32,620 --> 00:06:38,479
Na máquina,
um tuplo é representado como um bloco alocado na "heap".

84
00:06:38,479 --> 00:06:47,559
Isto quer dizer que temos um bloco na memória
que contém várias células

85
00:06:47,559 --> 00:06:50,569
e que existe uma célula por componente.

86
00:06:50,569 --> 00:06:55,889
Por exemplo, se tivermos um tuplo <u>p</u>
com os valores:  <u>1</u>, <u>2</u> e <u>3</u>

87
00:06:55,889 --> 00:06:59,699
então temos um bloco com três células.

88
00:06:59,699 --> 00:07:01,089
A primeira célula contém o <u>1</u>,

89
00:07:01,089 --> 00:07:03,229
a segunda contém o <u>2</u>,

90
00:07:03,229 --> 00:07:05,999
e a terceira contém o <u>3</u>.

91
00:07:05,999 --> 00:07:13,879
Agora, se tivermos um identificador <u>p</u>,

92
00:07:13,879 --> 00:07:17,279
que representa um valor de um tuplo,

93
00:07:17,279 --> 00:07:22,449
internamente é representado como um ponteiro para a memória.

94
00:07:22,449 --> 00:07:30,150
Então, se definirmos, por exemplo <u>q</u>,
em que o primeiro componente é <u>p</u>,

95
00:07:30,150 --> 00:07:34,749
isto significa que, na memória, a primeira célula do par


96
00:07:34,749 --> 00:07:42,719
é um ponteiro para o primeiro bloco.

97
00:07:42,719 --> 00:07:46,789
Os ponteiros podem ser partilhados.

98
00:07:46,789 --> 00:07:53,789
Isto significa que, se alterarmos o segundo componente
<u>q</u> de <u>0</u> para <u>p</u>,

99
00:07:53,789 --> 00:07:57,680
vamos ter dois ponteiros no par e

100
00:07:57,680 --> 00:08:04,129
o segundo aponta para o mesmo bloco
que o primeiro.

101
00:08:04,129 --> 00:08:08,759
Vamos agora falar de igualdades.

102
00:08:08,759 --> 00:08:13,119
No OCaml, existem dois tipos de igualdades.

103
00:08:13,119 --> 00:08:20,539
A primeira é a igualdade estrutural que
vocês já viram nas semanas anteriores.

104
00:08:20,540 --> 00:08:28,060
Dois valores são estruturalmente iguais
se tiverem o mesmo conteúdo.

105
00:08:28,060 --> 00:08:36,780
O operador <u>==</u> implementa
o que é chamado de igualdade física.

106
00:08:36,789 --> 00:08:46,220
Dois valores são fisícamente iguais,
se estes são armazenados no mesmo sítio da memória.

107
00:08:46,220 --> 00:08:51,500
Isto significa que dois ponteiros são iguais.

109
00:08:53,130 --> 00:09:03,750
Vamos definir então dois pares <u>x</u> e <u>y</u>,

110
00:09:03,750 --> 00:09:08,500
um identificador <u>z</u> que é igual a <u>x</u>.

111
00:09:08,500 --> 00:09:12,329
O que temos então aqui?

112
00:09:12,329 --> 00:09:15,079
A primeira coisa que temos que ver é:

113
00:09:15,079 --> 00:09:18,649
Se compararmos os componentes dos dois pares,

114
00:09:18,649 --> 00:09:21,470
eles são iguais.

115
00:09:21,470 --> 00:09:30,880
Mas agora, se usarmos a igualdade física
para comparar os dois pares <u>x</u> e <u>y</u>,

116
00:09:30,880 --> 00:09:33,670
desta vez, eles não são iguais,

117
00:09:33,670 --> 00:09:38,560
porque alocámos dois blocos de memória diferentes.

118
00:09:38,560 --> 00:09:45,000
O endereço de memória dos dois blocos são diferentes.

119
00:09:45,000 --> 00:09:56,120
Quando escrevemos que <u>z</u> é igual a <u>x</u>,
na verdade partilhámos os mesmos ponteiros.

120
00:09:56,130 --> 00:10:03,449
O valor associado ao identificador <u>z</u>,
é o mesmo ponteiro que temos para
<u>x</u>.

121
00:10:03,449 --> 00:10:08,040
Então <u>x</u> é fisicamente igual a <u>z</u>.

123
00:10:09,339 --> 00:10:14,920
Que erros de programação é que podemos
encontrar quando escrevemos padrões?

124
00:10:14,920 --> 00:10:21,440
O primeiro tipo de erros é quando não temos o número certo
de padrões

125
00:10:21,440 --> 00:10:28,269
correspondentes ao número de componentes de
um tuplo que estamos a analisar.

126
00:10:28,269 --> 00:10:35,920
Como já foi dito, não podemos usar um identificador
mais que uma vez num padrão.

127
00:10:35,920 --> 00:10:41,089
Isto tem o nome de padrão não linear.

128
00:10:41,089 --> 00:10:45,870
O compilador tem a capacidade de
capturar este tipo de erros,


129
00:10:45,870 --> 00:10:47,740
em tempo de compilação.

130
00:10:47,740 --> 00:10:51,870
Temos apenas que garantir que durante a execução,

131
00:10:51,870 --> 00:10:57,290
o programa não irá ter este tipo de problemas.

133
00:10:59,329 --> 00:11:05,769
Se escrevermos um padrão,
que está à espera de dois componentes e

134
00:11:05,769 --> 00:11:13,250
tentamos analisar um tuplo com três componentes

135
00:11:13,250 --> 00:11:22,580
o compilador irá avisar para a existência
de incompatibilidades.

136
00:11:22,580 --> 00:11:30,180

« os tipos, do padrão e da expressão, são incompatíveis »

137
00:11:30,180 --> 00:11:35,480
Não podemos atribuir o mesmo nome a dois componentes

138
00:11:35,480 --> 00:11:36,779
porque não faz sentido.

139
00:11:36,779 --> 00:11:40,550
E, novamente, o compilador é capaz de detectar

140
00:11:40,550 --> 00:11:45,430
este tipo de erros.

142
00:11:46,959 --> 00:11:49,819
Existe um outro tipo de erro de programação

143
00:11:49,819 --> 00:11:54,500
que podemos fazer quando usamos padrões sobre tuplos.

144
00:11:54,500 --> 00:11:59,019
Este tipo de erros não pode ser capturado pelo compilador

145
00:11:59,019 --> 00:12:04,149
uma vez que é um problema semântico.

146
00:12:04,149 --> 00:12:09,420
Definições que usam indíce podem ser propensos a erros.

148
00:12:11,769 --> 00:12:18,769
A seguinte definição de abcissa é bem tipada e

149
00:12:18,769 --> 00:12:23,920
a definição de ordenada também é bem tipada.

150
00:12:23,920 --> 00:12:27,800
Porém, esta contém um erro,
---um erro semântico---

151
00:12:27,800 --> 00:12:33,839
porque a abscissa devia estar em <u>x</u> e

152
00:12:33,839 --> 00:12:36,050
a ordenada devia estar em u>y</u>.

153
00:12:36,050 --> 00:12:42,800
Mas o compilador não consegue perceber
que cometemos este tipo de erro.

155
00:12:44,399 --> 00:12:47,620
Felizmente, vamos ver que outro tipo de tipos

156
00:12:47,620 --> 00:12:51,940
nos podem ajudar a evitar este tipo de erros semânticos.
